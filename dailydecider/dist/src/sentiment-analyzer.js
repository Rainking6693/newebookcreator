class SentimentAnalyzer{constructor(){this.positiveWords = [ 'amazing','awesome','brilliant','excellent','fantastic','great','incredible','outstanding','perfect','wonderful','love','like','enjoy','happy','excited','thrilled','delighted','pleased','satisfied','confident','optimistic','hopeful','eager','motivated','inspired','successful','achievement','accomplish','win','victory','triumph','success','benefit','advantage','opportunity','potential','promising','bright','positive','good','better','best','improve','progress','advance','grow','develop','enhance','upgrade' ];this.negativeWords = [ 'awful','terrible','horrible','bad','worst','hate','dislike','angry','frustrated','disappointed','upset','worried','anxious','stressed','concerned','afraid','scared','nervous','doubt','uncertain','confused','lost','stuck','problem','issue','trouble','difficulty','challenge','obstacle','barrier','fail','failure','mistake','error','wrong','negative','poor','decline','decrease','reduce','loss','damage','harm','risk','danger','threat','crisis','disaster','catastrophe','regret','sorry' ];this.urgencyWords = [ 'urgent','immediately','asap','quickly','fast','hurry','rush','deadline','emergency','critical','important','priority','crucial','vital','essential','necessary','must','need','require','demand','pressure','stress','time','late','overdue','soon' ];this.uncertaintyWords = [ 'maybe','perhaps','possibly','might','could','would','should','uncertain','unsure','doubt','question','wonder','think','believe','guess','assume','suppose','seem','appear','likely','probably','potentially','chance','risk','option','alternative' ];this.contextModifiers ={'very':1.5,'extremely':2.0,'incredibly':2.0,'really':1.3,'quite':1.2,'somewhat':0.7,'slightly':0.5,'barely':0.3,'not':-1.0,'never':-1.0,'no':-0.8,'without':-0.6}}async analyze(text){const words = this.tokenize(text.toLowerCase());const analysis ={polarity:0,magnitude:0,urgency:0,uncertainty:0,wordCount:words.length,sentimentWords:[],dominantEmotion:'neutral',confidence:0};let positiveScore = 0;let negativeScore = 0;let modifier = 1.0;for(let i = 0;i < words.length;i++){const word = words[i];const prevWord = i > 0 ? words[i - 1]:null;if(this.contextModifiers[word]){modifier = this.contextModifiers[word];continue}let wordScore = 0;let wordType = null;if(this.positiveWords.includes(word)){wordScore = 1 * modifier;positiveScore += wordScore;wordType = 'positive'}else if(this.negativeWords.includes(word)){wordScore = -1 * modifier;negativeScore += Math.abs(wordScore);wordType = 'negative'}if(wordScore !== 0){analysis.sentimentWords.push({word,score:wordScore,type:wordType,position:i,modifier:modifier})}if(this.urgencyWords.includes(word)){analysis.urgency += 0.2 * modifier}if(this.uncertaintyWords.includes(word)){analysis.uncertainty += 0.15 * modifier}modifier = 1.0}const totalSentimentWords = analysis.sentimentWords.length;analysis.polarity = totalSentimentWords > 0 ?(positiveScore - negativeScore)/ Math.max(1,totalSentimentWords):0;analysis.magnitude = Math.abs(analysis.polarity);analysis.urgency = Math.min(1,analysis.urgency);analysis.uncertainty = Math.min(1,analysis.uncertainty);analysis.dominantEmotion = this.determineDominantEmotion(analysis);analysis.confidence = this.calculateConfidence(analysis);analysis.contextualFactors = this.extractContextualFactors(text,words);return analysis}tokenize(text){return text .replace(/[^\w\s]/g,' ').split(/\s+/).filter(word => word.length > 0)}determineDominantEmotion(analysis){if(analysis.magnitude < 0.1)return 'neutral';if(analysis.polarity > 0.3){if(analysis.urgency > 0.5)return 'excited';if(analysis.uncertainty > 0.5)return 'hopeful';return 'positive'}if(analysis.polarity < -0.3){if(analysis.urgency > 0.5)return 'stressed';if(analysis.uncertainty > 0.5)return 'worried';return 'negative'}if(analysis.uncertainty > 0.5)return 'uncertain';if(analysis.urgency > 0.5)return 'focused';return 'neutral'}calculateConfidence(analysis){let confidence = 0.5;if(analysis.sentimentWords.length > 2)confidence += 0.2;if(analysis.magnitude > 0.5)confidence += 0.2;if(analysis.wordCount > 10)confidence += 0.1;if(analysis.wordCount > 20)confidence += 0.1;const averageModifier = analysis.sentimentWords.length > 0 ? analysis.sentimentWords.reduce((sum,w)=> sum + Math.abs(w.modifier),0)/ analysis.sentimentWords.length:1;if(averageModifier > 1.2)confidence += 0.1;return Math.min(1,confidence)}extractContextualFactors(originalText,words){const factors ={hasQuestion:/\?/.test(originalText),hasExclamation:/!/.test(originalText),wordLength:words.length,avgWordLength:words.reduce((sum,w)=> sum + w.length,0)/ Math.max(1,words.length),complexity:this.assessComplexity(words),timeReferences:this.findTimeReferences(words),personalReferences:this.findPersonalReferences(words)};return factors}assessComplexity(words){const complexWords = words.filter(word => word.length > 6).length;return complexWords / Math.max(1,words.length)}findTimeReferences(words){const timeWords = [ 'today','tomorrow','yesterday','now','soon','later','before','after','morning','afternoon','evening','night','week','month','year','deadline','schedule','time','urgent','immediate' ];return words.filter(word => timeWords.includes(word)).length}findPersonalReferences(words){const personalWords = ['i','me','my','mine','myself','we','us','our','ours'];return words.filter(word => personalWords.includes(word)).length}getEmotionalGuidance(analysis){const guidance ={message:'',recommendations:[],tone:'supportive'};switch(analysis.dominantEmotion){case 'excited':guidance.message = "Your enthusiasm is wonderful! Let's channel that energy productively.";guidance.recommendations = [ "Consider the long-term implications while maintaining your optimism","Make sure to plan for potential challenges" ];guidance.tone = 'encouraging';break;case 'worried':guidance.message = "I sense some concern in your question. Let's work through this thoughtfully.";guidance.recommendations = [ "Break down the decision into smaller,manageable parts","Consider what specific aspects worry you most" ];guidance.tone = 'reassuring';break;case 'stressed':guidance.message = "This seems urgent and stressful. Let's find clarity together.";guidance.recommendations = [ "Take a deep breath and prioritize the most critical aspects","Consider if this timeline is flexible or truly fixed" ];guidance.tone = 'calming';break;case 'uncertain':guidance.message = "Uncertainty is natural with important decisions. Let's explore your options.";guidance.recommendations = [ "List what you know for certain versus what's unknown","Consider gathering more information if time permits" ];guidance.tone = 'guiding';break;default:guidance.message = "Let's approach this decision systematically.";guidance.recommendations = [ "Consider both immediate and long-term consequences","Trust your instincts while being practical" ];guidance.tone = 'balanced'}return guidance}}